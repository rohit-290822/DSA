public class Solution {
    public int solve(int A) {
        int t= sum_of_digit(A);
        int y= sum_of_digit(t);
        int z=sum_of_digit(y);
        if(z==1)
        {
            return 1;
        }
        return 0;
    }
    static int sum_of_digit(int n) {  
        if (n == 0) 
            return 0; 
        return (n % 10 + sum_of_digit(n / 10)); 
    }
}


// public class Solution {
//     public int solve(int A) {
//         if(A%9 == 1){
//             return 1;
//         }
//         return 0;
//     }
// }
// There is also a shortcut method to verify Magic Number.
// The function will determine if the remainder of dividing the input by 9 is 1 or not.
// If it is 1, then the number is a magic number.
// The divisibility rule of 9 says that a number is divisible by 9 if the sum of its digits is also divisible by 9.
// Therefore, if a number is divisible by 9, then, recursively, all the digit sums are also divisible by 9.
// The final digit sum is always 9. An increase of 1 in the original number will increase the ultimate value by 1, making it 10, and the ultimate sum will be 1, thus verifying that it is a magic number.
