/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null)
            return "";
        StringBuilder sb = new StringBuilder();
        Queue<TreeNode> a = new LinkedList<>();
        a.add(root);
        while(a.size()!=0)
        {
            TreeNode n=a.remove();
            if(n==null)
            {
                sb.append("null ");
                continue;
            }
            sb.append(n.val+" ");
            a.add(n.left);
            a.add(n.right);
            
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data=="")
            return null;
            String[] arr= data.split(" ");
        Queue<TreeNode> a = new LinkedList<>();
        TreeNode treenode= new TreeNode(Integer.parseInt(arr[0]));
        a.add(treenode);
        for(int i=1;i<arr.length;i++)
        {   TreeNode parent=a.remove();
            if(!arr[i].equals("null"))
            {
                TreeNode left=  new TreeNode(Integer.parseInt(arr[i]));
                parent.left=left;
                a.add(left);
            }
         if(!arr[++i].equals("null"))
            {
                TreeNode right=  new TreeNode(Integer.parseInt(arr[i]));
                parent.right=right;
                a.add(right);
            }
         
                
        }
        return treenode;
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
